webpackJsonp([12],{1281:function(e,n,t){var i=t(0),a=t(57),s=t(322).PageRenderer;s.__esModule&&(s=s.default);var l=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1295)}},componentWillMount:function(){},render:function(){return i.createElement(s,Object.assign({},this.props,{content:this.state.content}))}});l.__catalog_loader__=!0,e.exports=l},1295:function(e,n){e.exports="## Introduction\nUse this component in order to have a 'fade in' effect on its child components.\n\n## Examples:\n\n<ElementFader visible={true} => makes element always Visible; no fade transition\n<ElementFader visible={false} => makes element always Invisible; no fade transition\n<ElementFader></ElementFader> => will manage internal state.visible\n\n## Rendering\n\n```react\nstate: {visible: false}\n---\n<div>\n    <button onClick={ () => setState( {visible: !state.visible} ) }>\n        Fade it {state.visible ? 'out' : 'in'} !\n    </button>\n    <ElementFader visible={state.visible}>\n        <img src=\"http://placehold.it/150x124/2263\" />\n    </ElementFader>\n</div>\n```\n\n## API\n\n```hint|neutral\n**visible**: bool\n - **true**: Force child elements to be visible\n - **false**: Force child elements to be invisible\n - **someVar**: pass 'someVar' as false.  Later, if someVar ===true, than the fade-in effect will trigger.\n```\n\n"}});
//# sourceMappingURL=12.507f568d.chunk.js.map